@article{Chavas2015,
  author          = {Chavas, Jean-Paul and Shi, Guanming},
  file            = {:C$\backslash$:/Users/Ariel/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chavas, Shi - 2015 - An Economic Analysis of Risk, Management, and Agricultural Technology.pdf:pdf},
  journal         = {Journal of Agricultural and Resource Economics},
  keywords        = {Agribusiness,Research and Development/Tech Change/Emerging Tech,Risk and Uncertainty,certainty equivalente,premium risk},
  mendeley-groups = {Risk Analysis},
  mendeley-tags   = {certainty equivalente,premium risk},
  number          = {1},
  pages           = {63--79},
  publisher       = {Western Agricultural Economics Association},
  title           = {{An Economic Analysis of Risk, Management, and Agricultural Technology}},
  volume          = {40},
  year            = {2015}
}


@article{Hardaker2004,
  author          = {Hardaker, J. Brian and Richardson, James W. and Lien, Gudbrand and Schumann, Keith D.},
  doi             = {10.1111/j.1467-8489.2004.00239.x},
  issn            = {1364-985X},
  journal         = {The Australian Journal of Agricultural and Resource Economics},
  keywords        = {SERF,certainty equivalente,premium risk},
  mendeley-groups = {Risk Analysis},
  mendeley-tags   = {SERF,certainty equivalente,premium risk},
  month           = {6},
  number          = {2},
  pages           = {253--270},
  publisher       = {John Wiley {\&} Sons, Ltd (10.1111)},
  title           = {{Stochastic efficiency analysis with risk aversion bounds: a simplified approach}},
  volume          = {48},
  year            = {2004}
}

@webpage{WhatIsKubernetes,
  title = {What is Kubernetes}
}
@webpage{Container,
  title = {What is a Container ?}
}
@inproceedings{Singh2017,
  author    = {Vindeep Singh and Sateesh K Peddoju},
  doi       = {10.1109/CCAA.2017.8229914},
  isbn      = {978-1-5090-6471-7},
  journal   = {2017 International Conference on Computing, Communication and Automation (ICCCA)},
  month     = {5},
  pages     = {847-852},
  publisher = {IEEE},
  title     = {Container-based microservice architecture for cloud applications},
  year      = {2017}
}
@book{,
  abstract = {Conference location: Greater Noida, India. "Part Number: CFP17IWY-ART"--PDF copyright page. Globalization today pervades almost every facet of human life thanks to the emergence of new technologies in computing and communications At the same time, automation with its strong focus on providing fast and ready access for human, based on these developments in computing and communications plays very crucial role in people s lives and permeates all it in all respects, from entertainment to healthcare and from database to e governance The scope of International Conference (ICCCA 2017) is to provide a forum for exchange of ideas among interested practitioners in the areas of computing, communications and automation from fundamental research to emerging applications, while emphasizing societyshaping technologies in the modern IT era It will provide an excellent opportunity for the researchers to expose their work to international scrutiny and to open up the scope for new research collaborations among the international community of participants and invited delegates.},
  author   = {Parma Nand Astya and Galgotias University. School of Computing Science and Engineering and Institute of Electrical and Electronics Engineers. Uttar Pradesh Section and Institute of Electrical and Electronics Engineers},
  isbn     = {9781509064717},
  title    = {IEEE International Conference on Computing, Communication and Automation (ICCCA 2017) : proceeding : on 5th-6th May, 2017}
}
@article{Khazaei2016,
  abstract = {Microservice architecture has started a new trend for application development/deployment in cloud due to its flexibility, scalability, manageability and performance. Various microservice platforms have emerged to facilitate the whole software engineering cycle for cloud applications from design, development, test, deployment to maintenance. In this paper, we propose a performance analytical model and validate it by experiments to study the provisioning performance of microservice platforms. We design and develop a microservice platform on Amazon EC2 cloud using Docker technology family to identify important elements contributing to the performance of microservice platforms. We leverage the results and insights from experiments to build a tractable analytical performance model that can be used to perform what-if analysis and capacity planning in a systematic manner for large scale microservices with minimum amount of time and cost.},
  author   = {Hamzeh Khazaei and Cornel Barna and Nasim Beigi-Mohammadi and Marin Litoiu},
  doi      = {10.1109/CloudCom.2016.48},
  title    = {Efficiency Analysis of Provisioning Microservices},
  year     = {2016}
}
@inproceedings{Wu2014,
  abstract  = {Cloud computing is a new computing model which can share a set of configurable computing resources with users through real-time network. Users hardly have any interaction with service providers, but can take advantage of the resources with the minimum configuring spending. As a kind of integrated model, SOA blends the developing and the integrated process, diminishes the differences of various practical systems and realizes the EAI function with low cost and comprehensive systems. Cloud computing is the further development of distributed computing, parallel processing and grid computing. Based on the Internet, it is a kind of calculation system, which can provide the hardware for various Internet application services, infrastructure services, platform service, software services, and storage service. This thesis discusses the respective advantages and interrelationship of cloud computing and SOA framework, and puts forward the framework of combining SOA and cloud computing model. The framework has the characteristics of application flexibility, the features of easy extension, easy maintenance as well as low cost.},
  author    = {Jia Qi Wu and Tong Wang},
  doi       = {10.1109/ES.2014.58},
  isbn      = {9781479955541},
  journal   = {Proceedings - 2nd International Conference on Enterprise Systems, ES 2014},
  keywords  = {Cloud computing,SAAS,SOA,Web applications,architecture},
  month     = {12},
  pages     = {294-299},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Research and application of SOA and cloud computing model},
  year      = {2014}
}
@inproceedings{Xiao2017,
  abstract  = {Today's Enterprises are facing many challenges in the service oriented, customer experience centric and customer demand driven global environment where ICT is becoming the leading enabler and partner of the modern enterprise. In the last decade, many enterprises have invested heavily in SOA-aligned IT transformations, but not harvested what SOA promised to provide. Now the API and Microservice paradigm has emerged as the 'next big thing' for delivering IT outcomes to support the modern enterprise, with many technology vendors and service jumping on the bandwagon. This paper undertakes a critical investigation of the key concepts around SOA, API and Microservices, identifying similarities and differences between them and dispelling the confusion and hype around them. Based on our discussion and analysis, this paper presents a set of recommendations and best practices on the effective use and management of enterprise software components, drawing upon the best of SOA, API and Microservice concepts and practice.},
  author    = {Zhongxiang Xiao and Inji Wijegunaratne and Xinjian Qiang},
  doi       = {10.1109/ES.2016.14},
  isbn      = {9780769559841},
  journal   = {Proceedings - 4th International Conference on Enterprise Systems: Advances in Enterprise Systems, ES 2016},
  keywords  = {API,architecture design pattern,enterprise architecture,microservice,service oriented architecture},
  month     = {3},
  pages     = {60-67},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Reflections on SOA and Microservices},
  year      = {2017}
}
@book{Newman2015,
  author    = {Sam Newman},
  edition   = {1},
  publisher = {O'Reilly Media},
  title     = {Building Microservices: Designing Fine-Grained Systems},
  year      = {2015}
}
@inproceedings{Yale2016,
  author    = {Yale Yu and Haydn Silveira and Max Sundaram},
  doi       = {10.1109/IMCEC.2016.7867539},
  isbn      = {978-1-4673-9613-4},
  journal   = {2016 IEEE Advanced Information Management, Communicates, Electronic and Automation Control Conference (IMCEC)},
  month     = {10},
  pages     = {1856-1860},
  publisher = {IEEE},
  title     = {A microservice based reference architecture model in the context of enterprise architecture},
  year      = {2016}
}
@article{BingXu2017,
  abstract = {"IEEE Catalog Number: CFP16E32-ART"--PDF copyright page.},
  author   = {Bing Xu and Institute of Electrical and Electronics Engineers. Beijing Section and Institute of Electrical and Electronics Engineers},
  isbn     = {9781467396134},
  title    = {Proceedings of 2016 IEEE Advanced Information Management, Communicates, Electronic and Automation Control Conference (IMCEC 2016) : October 3-5, 2016, Xi'an China}
}
@article{Park2020,
  abstract  = {Microservices are small-scale services that can operate independently. An application consisting of microservice units can be developed independently as a service unit, and it can handle individual logic without being affected by other services. In addition, it is possible to rapidly distribute the configured microservices by a container, and a container orchestration technology that manages the distributed multiple containers can be realized; thus, it is possible to update and distribute the microservices separately. Therefore, many companies are moving away from existing monolithic structures and attempting to switch to microservices. In this paper, we present a method for reconstructing a monolithic application into a container-based microservice unit. The microservices of data units are derived through the collection and analysis of monolithic design data. Furthermore, we propose a method to generate a template script based on deployment design data so that the derived microservice and support distribution can be implemented in a container environment. The results of a case study conducted verified that the container-based microservices deployed in this study work properly. In addition, for the development of monolithic applications and the development of container-based microservices presented in this paper, we confirmed that developing on the basis of microservices is efficient by conducting execution time performance evaluation for API calls at various iterations. Finally, we show that microservices constructed using the proposed method have higher reusability than those constructed using existing methods.},
  author    = {Joonseok Park and Daeho Kim and Keunhyuk Yeom},
  doi       = {10.1155/2020/4295937},
  issn      = {1875905X},
  journal   = {Mobile Information Systems},
  publisher = {Hindawi Limited},
  title     = {An Approach for Reconstructing Applications to Develop Container-Based Microservices},
  volume    = {2020},
  year      = {2020}
}
@article{Tania2014,
  abstract  = {Cloud computing environments allow customers to dynamically scale their applications. The key problem is how to lease the right amount of resources, on a pay-as-you-go basis. Application re-dimensioning can be implemented effortlessly, adapting the resources assigned to the application to the incoming user demand. However, the identification of the right amount of resources to lease in order to meet the required Service Level Agreement, while keeping the overall cost low, is not an easy task. Many techniques have been proposed for automating application scaling. We propose a classification of these techniques into five main categories: static threshold-based rules, control theory, reinforcement learning, queuing theory and time series analysis. Then we use this classification to carry out a literature review of proposals for auto-scaling in the cloud.},
  author    = {Tania Lorido-Botran and Jose Miguel-Alonso and Jose A. Lozano},
  doi       = {10.1007/s10723-014-9314-7},
  issn      = {15729184},
  issue     = {4},
  journal   = {Journal of Grid Computing},
  keywords  = {Auto-scaling,Cloud computing,Scalable applications,Service level agreement},
  month     = {11},
  pages     = {559-592},
  publisher = {Kluwer Academic Publishers},
  title     = {A Review of Auto-scaling Techniques for Elastic Applications in Cloud Environments},
  volume    = {12},
  year      = {2014}
}
@report{sistemTracingITB,
  author = {Aplikasi BERBASIS MICROSERVICE YANG MENGGUNAKAN GRPC DAN BERJALAN PADA KUBERNETES Laporan Tugas Akhir and Sekolah Teknik Elektro Dan Informatika},
  title  = {PEMBANGUNAN SISTEM TRANSPARENT TRACING PADA Disusun sebagai syarat kelulusan tingkat sarjana Oleh ABRAM PERDANAPUTRA NIM : 13516083 PROGRAM STUDI TEKNIK INFORMATIKA},
  year   = {2020}
}
@inproceedings{LeilaAbdullah2019,
  abstract  = {Kubernetes is an open source platform that hides the complexity of orchestrating containerized microservices while managing their availability. Stateless microservices can be executed in a resilient manner with Kubernetes. However, the same is not true for stateful microservices. Containers are characterized by having an ephemeral state and the state aspect of stateful microservices makes orchestration more complex than what the initial Kubernetes controllers were built for. In this paper, we investigate the current Kubernetes support for stateful microservices and identify the problems. We propose a solution to enrich Kubernetes with a State Controller that allows for state replication and automatic service redirection to the healthy entities through the management of secondary labels. We have conducted experiments under the default configuration of Kubernetes as well as under its most responsive one to evaluate our solution and compare the different architectures from an availability perspective. We also perform a comparative evaluation with OpenSAF, which is a proven solution for enabling high-Availability. The results of our investigations show that our solution improves the recovery time of stateful microservices by 55% and even up to 99% in certain cases.},
  author    = {Leila Abdollahi Vayghan and Mohamed Aymen Saied and Maria Toeroe and Ferhat Khendek},
  doi       = {10.1109/QRS.2019.00034},
  isbn      = {9781728139272},
  journal   = {Proceedings - 19th IEEE International Conference on Software Quality, Reliability and Security, QRS 2019},
  keywords  = {Availability,Containers,Docker,Failure,Kubernetes,Microservices,Orchestration},
  month     = {7},
  pages     = {176-185},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Microservice Based Architecture: Towards High-Availability for Stateful Applications with Kubernetes},
  year      = {2019}
}
@inproceedings{Leitner2016,
  abstract  = {We present an approach to model the deployment costs, including compute and IO costs, of Microservice-based applications deployed to a public cloud. Our model, which we dubbed CostHat, supports both, Microservices deployed on traditional IaaS or PaaS clouds, and services that make use of novel cloud programming paradigms, such as AWS Lambda. CostHat is based on a network model, and allows for what-if and cost sensitivity analysis. Further, we have used this model to implement tooling that warns cloud developers directly in the Integrated Development Environment (IDE) about certain classes of potentially costly code changes. We illustrate our work based on a case study, and evaluate the CostHat model using a standalone Python implementation. We show that, once instantiated, cost calculation in CostHat is computationally inexpensive on standard hardware (below 1 ms even for applications consisting of thousand services and endpoints). This enables its use in real-time for developer tooling which continually re-evaluates the costs of an application in the background, while the developer is working on the code.},
  author    = {Philipp Leitner and Jürgen Cito and Emanuel Stöckli},
  doi       = {10.1145/2996890.2996901},
  isbn      = {9781450346160},
  journal   = {Proceedings - 9th IEEE/ACM International Conference on Utility and Cloud Computing, UCC 2016},
  month     = {12},
  pages     = {165-174},
  publisher = {Association for Computing Machinery, Inc},
  title     = {Modelling and managing deployment costs of microservice-based cloud applications},
  year      = {2016}
}
@inproceedings{Vural2017,
  abstract  = {The cloud is an emerging paradigm which leads the way for different approaches and standards. The architectural styles are evolving based on the requirements of the cloud as well. In recent years microservices is seen as the architecture style for scalable, fast evolving cloud applications. As part of this paper, a systematic mapping study was carried out around microservices. It is aiming to find out the current trends around microservices, the motivation behind microservices research, emerging standards and the possible research gaps. The obtained results can help researchers and practitioner in software engineering domain who want to be aware of new trends about SOA and cloud computing.},
  author    = {Hulya Vural and Murat Koyuncu and Sinem Guney},
  doi       = {10.1007/978-3-319-62407-5_14},
  isbn      = {9783319624068},
  issn      = {16113349},
  journal   = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  keywords  = {Cloud,Microservices,SOA,Systematic mapping,Web services},
  pages     = {203-217},
  publisher = {Springer Verlag},
  title     = {A systematic literature review on microservices},
  volume    = {10409 LNCS},
  year      = {2017}
}

@article{Aksakalli2021,
  abstract  = {Context: Microservice is an architectural style that separates large systems into small functional units to provide better modularity. A key challenge of microservice architecture design frequently discussed in the literature is the identification and decomposition of the service modules. Besides this, two other key challenges can be identified, including the deployment of the modules on the corresponding execution platform, and adopted communication patterns. Objective: This study aims to identify and describe the reported deployment approaches, and the communication platforms for microservices in the current literature. Furthermore, we aim to describe the identified obstacles of these approaches as well as the corresponding research directions. Method: A systematic literature review (SLR) is conducted using a multiphase study selection process in which we reviewed a total of 239 papers. Among these, we selected 38 of them as primary studies related to the described research questions. Results: Based on our study, we could identify three types of deployment approaches and seven different communication patterns. Moreover, we have identified eight challenges related to the deployment and six challenges related to the communication concerns. Conclusion: Our study shows that in addition to the identification of modules, the deployment and communication approaches are equally crucial for a successful application of the microservice architecture style. Various deployment approaches and communication patterns appear to be useful for different contexts. The identified research directions in the literature study show that still more research is needed to cope with the current challenges.},
  author    = {Işıl Karabey Aksakalli and Turgay Çelik and Ahmet Burak Can and Bedir Teki̇nerdoğan},
  doi       = {10.1016/j.jss.2021.111014},
  issn      = {01641212},
  journal   = {Journal of Systems and Software},
  keywords  = {Communication concerns,Communication patterns of microservices,Deployment challenges,Microservice architectures,Microservice deployment,Research directions},
  month     = {10},
  publisher = {Elsevier Inc.},
  title     = {Deployment and communication patterns in microservice architectures: A systematic literature review},
  volume    = {180},
  year      = {2021}
}

@inproceedings{Leila2018,
  abstract  = {Microservices represent a new architectural style where small and loosely coupled modules can be developed and deployed independently to compose an application. This architectural style brings various benefits such as maintainability and flexibility in scaling and aims at decreasing downtime in case of failure or upgrade. One of the enablers is Kubernetes, an open source platform that provides mechanisms for deploying, maintaining, and scaling containerized applications across a cluster of hosts. Moreover, Kubernetes enables healing through failure recovery actions to improve the availability of applications. As our ultimate goal is to devise architectures to enable high availability (HA) with Kubernetes for microservice based applications, in this paper we examine the availability achievable through Kubernetes under its default configuration. We have conducted a set of experiments which show that the service outage can be significantly higher than expected.},
  author    = {Leila Abdollahi Vayghan and Mohamed Aymen Saied and Maria Toeroe and Ferhat Khendek},
  doi       = {10.1109/CLOUD.2018.00148},
  isbn      = {9781538672358},
  issn      = {21596190},
  journal   = {IEEE International Conference on Cloud Computing, CLOUD},
  keywords  = {Availability,Containers,Docker,Failure,Kubernetes,Microservices,Orchestration},
  month     = {9},
  pages     = {970-973},
  publisher = {IEEE Computer Society},
  title     = {Deploying Microservice Based Applications with Kubernetes: Experiments and Lessons Learned},
  volume    = {2018-July},
  year      = {2018}
}

@book{Bhavsar2021,
  abstract  = {The biggest challenge faced by information technology (IT) industry is of the deployment and release, traditional methods used to release the final build as a part of deployment process, along with deployment of the database and code on the on premise infrastructure which was a long and cumbersome process, then with advent of cloud computing, things became easy, and the infrastructure was shifted from on premises to cloud, this made the on demand access of resources just a matter of clicks, but still deployment was a problem due to a major reason of “Code working on developer’s machine but not working properly in staging or production environments”. Primary reasons included versioning problems, software patches or bug fixes. It also had various problems such as scalability issues, the infrastructures were not fault tolerant as well as lack of disaster recovery strategy in place. With advent of containerization, the platform dependency issues were resolved, but again deployment release and rolling updates are a major issue with them as well. This paper focuses on high level overview about how CI/CD could solve the problem of deployment and rolling upgrades by automating the entire build and deployment process, as well as to handle the rolling updates process in an effective manner. It also provides a way of implementing the disaster recovery strategy regardless of the underlying cloud platform as well as fault tolerance mechanism if in case any failure occurs in staging or production environments.},
  author    = {Sejal Bhavsar and Jimit Rangras and Kirit Modi},
  doi       = {10.1007/978-981-15-4474-3_47},
  issn      = {23674520},
  journal   = {Lecture Notes on Data Engineering and Communications Technologies},
  keywords  = {CI/CD,Cloud computing,Containers,DevOps},
  pages     = {423-429},
  publisher = {Springer Science and Business Media Deutschland GmbH},
  title     = {Automating Container Deployments Using CI/CD},
  volume    = {52},
  year      = {2021}
}

@inproceedings{Ramadoni2021,
  abstract  = {Currently, the problems faced by software developers in implementing the DevOps method include security issues of a person's ability to directly access and change clusters and the ineffective rollback process in the application deployment process to an application platform. The GitOps method was applied in this study to investigate and test how GitOps was able to solve these problems. This research used pull-based deployment and declarative deployment approaches rather than the push-based deployment models commonly used in today's CI/CD pipelines. The Argo CD tool serves as an operator, and Kubernetes serves as a platform for deploying container-based applications. This study is expected to be a recommendation for companies or institutions as well as individuals who want to start adopting DevOps or who want to take DevOps implementation to the next level using the GitOps method},
  author    = {Ramadoni and Ema Utami and Hanif Al Fatta},
  doi       = {10.1109/icoiact53268.2021.9563984},
  month     = {10},
  pages     = {186-191},
  publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
  title     = {Analysis on the Use of Declarative and Pull-based Deployment Models on GitOps Using Argo CD},
  year      = {2021}
}

@inproceedings{Lyu2007,
  abstract = {Software reliability engineering is focused on engineering techniques for developing and maintaining software systems whose reliability can be quantitatively evaluated. In order to estimate as well as to predict the reliability of software systems, failure data need to be properly measured by various means during software development and operational phases. Moreover, credible software reliability models are required to track underlying software failure processes for accurate reliability analysis and forecasting. Although software reliability has remained an active research subject over the past 35 years, challenges and open questions still exist. In particular, vital future goals include the development of new software reliability engineering paradigms that take software architectures, testing techniques, and software failure manifestation mechanisms into consideration. In this paper, we review the history of software reliability engineering, the current trends and existing problems, and specific difficulties. Possible future directions and promising research subjects in software reliability engineering are also addressed. © 2007 IEEE.},
  author   = {Michael R. Lyu},
  doi      = {10.1109/FOSE.2007.24},
  isbn     = {0769528295},
  journal  = {FoSE 2007: Future of Software Engineering},
  pages    = {153-170},
  title    = {Software reliability engineering: A roadmap},
  year     = {2007}
}

@inproceedings{Carzaniga1998,
  abstract = {Software applications are no longer stand-alone systems. They are increasingly the result of integrating heterogeneous collections of components, both executable and data, possibly dispersed over a computer network. Different components can be provided by different producers and they can be part of different systems at the same time. Moreover , components can change rapidly and independently, making it difficult to manage the whole system in a consistent way. Under these circumstances, a crucial step of the software life cycle is deployment-that is, the activities related to the release, installation , activation, deactivation, update, and removal of components, as well as whole systems. This paper presents a framework for characterizing technologies that are intended to support software deployment. The framework highlights four primary factors concerning the technologies: process coverage; process changeability; interprocess coordination; and site, product, and deployment policy abstraction. A variety of existing technologies are surveyed and assessed against the framework. Finally, we discuss promising research directions in software deployment.},
  author   = {Antonio Carzaniga and Alfonso Fuggetta and Richard S Hall and Dennis Heimbigner and André Van Der Hoek and Alexander L Wolf},
  title    = {A Characterization Framework for Software Deployment Technologies},
  year     = {1998}
}

@inproceedings{Bolscher2019,
  abstract  = {This paper presents a systematic literature review of software architecture approaches that support the implementation of Continuous Delivery (CD) and DevOps. Its goal is to provide an understanding of the state-of-the-art on the topic, which is informative for both researchers and practitioners. We found 17 characteristics of a software architecture that are beneficial for CD and DevOps adoption and identified ten potential software architecture obstacles in adopting CD and DevOps in the case of an existing software system. Moreover, our review indicated that micro-services are a dominant architectural style in this context. Our literature review has some implications: for researchers, it provides a map of the recent research efforts on software architecture in the CD and DevOps domain. For practitioners, it describes a set of software architecture principles that possibly can guide the process of creating or adapting software systems to fit in the CD and DevOps context.},
  author    = {Robin Bolscher and Maya Daneva},
  doi       = {10.5220/0007837000270039},
  isbn      = {9789897583797},
  journal   = {ICSOFT 2019 - Proceedings of the 14th International Conference on Software Technologies},
  keywords  = {Continuous delivery,Continuous integration,Deployability,DevOps,Micro-services,Software architecture,Systematic literature review},
  pages     = {27-39},
  publisher = {SciTePress},
  title     = {Designing software architecture to support continuous delivery and DevOps: A systematic literature review},
  year      = {2019}
}

@report{Dearle2007,
  author = {Alan Dearle},
  title  = {Software Deployment, Past, Present and Future},
  year   = {2007}
}

@report{Jansen2006,
  abstract = {For software vendors the processes of release, delivery, and deployment to customers are inherently complex. However , software vendors can greatly improve their product quality and quality of service by applying a model that fo-cuses on customer interaction if such a model were available. This paper presents a model for customer configuration updating (CCU) that can evaluate the practices of a software vendor in these processes. Nine extensive case studies of medium to large product software vendors are presented and evaluated using the model, thereby uncovering issues in their release, delivery, and deployment processes. Finally, organisational and architectural changes are proposed to increase quality of service and product quality for software vendors.},
  author   = {Slinger Jansen and Sjaak Brinkkemper},
  title    = {Definition and Validation of the Key process of Release, Delivery and Deployment for Product Software Vendors: turning the ugly duckling into a swan},
  url      = {http://www.swebok.org},
  year     = {2006}
}

@report{Mockus2005,
  abstract = {Predicting software quality as perceived by a customer may allow an organization to adjust deployment to meet the quality expectations of its customers, to allocate the appropriate amount of maintenance resources, and to direct quality improvement efforts to maximize the return on investment. However, customer perceived quality may be affected not simply by the software content and the development process, but also by a number of other factors including deployment issues, amount of usage, software platform, and hardware configurations. We predict customer perceived quality as measured by various service interactions, including software defect reports, requests for assistance, and field technician dispatches using the afore mentioned and other factors for a large telecommunications software system. We employ the non-intrusive data gathering technique of using existing data captured in automated project monitoring and tracking systems as well as customer support and tracking systems. We find that the effects of deployment schedule, hardware configurations, and software platform can increase the probability of observing a software failure by more than 20 times. Furthermore, we find that the factors affect all quality measures in a similar fashion. Our approach can be applied at other organizations, and we suggest methods to independently validate and replicate our results.},
  author   = {Audris Mockus and Ping Zhang},
  keywords = {Keywords},
  title    = {Predictors of Customer Perceived Software Quality},
  year     = {2005}
}

@inproceedings{Miva2011,
  abstract = {Software deployment, including both clean installs and updates, is a crucial activity for all software vendors. It starts with a customer's order of a new release and incorporates all steps taken until the customer is satisfied with the deployed product. Using interviews as the main data collection method, we conducted a case study of four companies to discover their software deployment activities and challenges. The studied products were more complicated than pure COTS products. We noticed three product characteristics that make deployment more challenging: 1) the product is tightly integrated to other customer systems, 2) the product offers various configuration options to support different ways of working, and 3) the product requires a pre-created, complex, real-world data model to be usable. We also noticed that software deployment is multifaceted, involving activities related to customer interaction; making integrations; and configuring, installing and testing the products. © 2011 IEEE.},
  author   = {Mika V. Mäntylä and Jari Vanhanen},
  doi      = {10.1109/CSMR.2011.19},
  isbn     = {9780769543437},
  issn     = {15345351},
  journal  = {Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
  keywords = {Deployment activities,Industrial case study,Installablity,Software deployment process},
  pages    = {131-139},
  title    = {Software deployment activities and challenges - A case study of four software product companies},
  year     = {2011}
}

@book{phoenix2013,
  author    = {Kim, Gene and Behr, Kevin and Spafford, George},
  title     = {The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win},
  year      = {2013},
  isbn      = {0988262592},
  publisher = {IT Revolution Press},
  edition   = {1st},
  abstract  = {Bill is an IT manager at Parts Unlimited. It's Tuesday morning and on his drive into the office, Bill gets a call from the CEO. The company's new IT initiative, code named Phoenix Project, is critical to the future of Parts Unlimited, but the project is massively over budget and very late. The CEO wants Bill to report directly to him and fix the mess in ninety days or else Bill's entire department will be outsourced. With the help of a prospective board member and his mysterious philosophy of The Three Ways, Bill starts to see that IT work has more in common with manufacturing plant work than he ever imagined. With the clock ticking, Bill must organize work flow streamline interdepartmental communications, and effectively serve the other business functions at Parts Unlimited. In a fast-paced and entertaining style, three luminaries of the DevOps movement deliver a story that anyone who works in IT will recognize. Readers will not only learn how to improve their own IT organizations, they'll never view IT the same way again.}
}

@article{Proulx2018,
  abstract = {Context: The software industry needs to adapt itself to a rapidly changing market. Continuous practices (Continuous Integration, Continuous Delivery and Continuous Deployment), commonly found in Agile development processes, it is possible to deliver new features more frequently to clients, integrating of smaller features is less likely to cause conflicts than the more traditional approach of merging big features less frequently all at once. However, Continuous Deployment is no clear way on the best approaches for their implementation. Objective: The goal of this paper is to identify the challenges and the solutions related to Continuous Deployment, and then see which of those solutions can be applied to which challenges. Method: This paper is a systematic literature review of the problems and the solutions found when implementing the continuous deployment practice inside an organization. It also presents which solution can be applied to which problem. Thirty-one articles published after 2015 were analyzed for this SLR. Results: 22 problems were grouped inside the categories Human and Organizational, Process, Tools, Infrastructure, Application Architecture and Testing. The 19 solutions found were grouped inside the categories Human and Organizational, Architecture, Process and Tools. Solutions have been found for 14 problems and some questions have been identified for future research. Conclusion: this article is to serve as a reference for the practitioner who wants to find how to solve a specific challenge when implementing the continuous deployment practice.},
  author   = {Antoine Proulx and Francis Raymond and Bruno Roy and Fabio Petrillo},
  month    = {12},
  title    = {Problems and Solutions of Continuous Deployment: A Systematic Review},
  url      = {http://arxiv.org/abs/1812.08939},
  year     = {2018}
}

@generic{Shahin2017,
  abstract  = {Continuous practices, i.e., continuous integration, delivery, and deployment, are the software development industry practices that enable organizations to frequently and reliably release new features and products. With the increasing interest in the literature on continuous practices, it is important to systematically review and synthesize the approaches, tools, challenges, and practices reported for adopting and implementing continuous practices. This paper aimed at systematically reviewing the state of the art of continuous practices to classify approaches and tools, identify challenges and practices in this regard, and identify the gaps for future research. We used the systematic literature review method for reviewing the peer-reviewed papers on continuous practices published between 2004 and June 1, 2016. We applied the thematic analysis method for analyzing the data extracted from reviewing 69 papers selected using predefined criteria. We have identified 30 approaches and associated tools, which facilitate the implementation of continuous practices in the following ways: 1) reducing build and test time in continuous integration (CI); 2) increasing visibility and awareness on build and test results in CI; 3) supporting (semi-) automated continuous testing; 4) detecting violations, flaws, and faults in CI; 5) addressing security and scalability issues in deployment pipeline; and 6) improving dependability and reliability of deployment process. We have also determined a list of critical factors, such as testing (effort and time), team awareness and transparency, good design principles, customer, highly skilled and motivated team, application domain, and appropriate infrastructure that should be carefully considered when introducing continuous practices in a given organization. The majority of the reviewed papers were validation (34.7%) and evaluation (36.2%) research types. This paper also reveals that continuous practices have been successfully applied to both greenfield and maintenance projects. Continuous practices have become an important area of software engineering research and practice. While the reported approaches, tools, and practices are addressing a wide range of challenges, there are several challenges and gaps, which require future research work for improving the capturing and reporting of contextual information in the studies reporting different aspects of continuous practices; gaining a deep understanding of how software-intensive systems should be (re-) architected to support continuous practices; and addressing the lack of knowledge and tools for engineering processes of designing and running secure deployment pipelines.},
  author    = {Mojtaba Shahin and Muhammad Ali Babar and Liming Zhu},
  doi       = {10.1109/ACCESS.2017.2685629},
  issn      = {21693536},
  journal   = {IEEE Access},
  keywords  = {Continuous integration,continuous delivery,continuous deployment,continuous software engineering,empirical software engineering,systematic literature review},
  pages     = {3909-3943},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Continuous Integration, Delivery and Deployment: A Systematic Review on Approaches, Tools, Challenges and Practices},
  volume    = {5},
  year      = {2017}
}
@generic{Leite2019,
  abstract  = {DevOpsis a collaborative and multidisciplinary organizational effort to automate continuous delivery of new software updates while guaranteeing their correctness and reliability. The present survey investigates and discusses DevOps challenges from the perspective of engineers, managers, and researchers.We review the literature and develop a DevOps conceptual map, correlating the DevOps automation tools with these concepts. We then discuss their practical implications for engineers, managers, and researchers. Finally, we critically explore some of the most relevant DevOps challenges reported by the literature.},
  author    = {Leonardo Leite and Carla Rocha and Fabio Kon and Dejan Milojicic and Paulo Meirelles},
  doi       = {10.1145/3359981},
  issn      = {15577341},
  issue     = {6},
  journal   = {ACM Computing Surveys},
  keywords  = {And build process,Configuration management,Continuous (delivery, deployment, integration),DevOps,Release process,Versioning},
  month     = {11},
  publisher = {Association for Computing Machinery},
  title     = {A survey of DevOps concepts and challenges},
  volume    = {52},
  year      = {2019}
}

@inproceedings{Abbass2019,
  author    = {Moutaman Kamal Aldeen Abbass and Rahama Ibrahim Elyass Osman and Abubaker Motasem Hmad Mohammed and Mohannad Waheed Ahmed Alshaikh},
  doi       = {10.1109/ICCCEEE46830.2019.9070849},
  isbn      = {978-1-7281-1006-6},
  journal   = {2019 International Conference on Computer, Control, Electrical, and Electronics Engineering (ICCCEEE)},
  month     = {9},
  pages     = {1-4},
  publisher = {IEEE},
  title     = {Adopting Continuous Integeration and Continuous Delivery for Small Teams},
  year      = {2019}
}

@inproceedings{Fritzsch2019,
  abstract  = {To remain competitive in a fast changing environment, many companies started to migrate their legacy applications towards a Microservices architecture. Such extensive migration processes require careful planning and consideration of implications and challenges likewise. In this regard, hands-on experiences from industry practice are still rare. To fill this gap in scientific literature, we contribute a qualitative study on intentions, strategies, and challenges in the context of migrations to Microservices. We investigated the migration process of 14 systems across different domains and sizes by conducting 16 in-depth interviews with software professionals from 10 companies. Along with a summary of the most important findings, we present a separate discussion of each case. As primary migration drivers, maintainability and scalability were identified. Due to the high complexity of their legacy systems, most companies preferred a rewrite using current technologies over splitting up existing code bases. This was often caused by the absence of a suitable decomposition approach. As such, finding the right service cut was a major technical challenge, next to building the necessary expertise with new technologies. Organizational challenges were especially related to large, traditional companies that simultaneously established agile processes. Initiating a mindset change and ensuring smooth collaboration between teams were crucial for them. Future research on the evolution of software systems can in particular profit from the individual cases presented.},
  author    = {Jonas Fritzsch and Justus Bogner and Stefan Wagner and Alfred Zimmermann},
  doi       = {10.1109/ICSME.2019.00081},
  isbn      = {9781728130941},
  journal   = {Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019},
  keywords  = {Microservices,agile transformation,decomposition,empirical study,industry,interviews,migration,refactoring},
  month     = {9},
  pages     = {481-490},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Microservices Migration in Industry: Intentions, Strategies, and Challenges},
  year      = {2019}
}

@book{Forsgen2018,
  author    = {Forsgren, Nicole and Humble, Jez and Kim, Gene},
  title     = {Accelerate: The Science of Lean Software and DevOps Building and Scaling High Performing Technology Organizations},
  year      = {2018},
  isbn      = {1942788339},
  publisher = {IT Revolution Press},
  edition   = {1st},
  abstract  = {Accelerate your organization to win in the marketplace. How can we apply technology to drive business value? For years, we've been told that the performance of software delivery teams doesn't matterthat it can't provide a competitive advantage to our companies. Through four years of groundbreaking research to include data collected from the State of DevOps reports conducted with Puppet, Dr. Nicole Forsgren, Jez Humble, and Gene Kim set out to find a way to measure software delivery performanceand what drives itusing rigorous statistical methods. This book presents both the findings and the science behind that research, making the information accessible for readers to apply in their own organizations. Readers will discover how to measure the performance of their teams, and what capabilities they should invest in to drive higher performance. This book is ideal for management at every level.}
}

@article{Bass2018,
  author  = {Len Bass},
  doi     = {10.1109/MS.2017.4541051},
  issn    = {0740-7459},
  issue   = {1},
  journal = {IEEE Software},
  month   = {1},
  pages   = {8-10},
  title   = {The Software Architect and DevOps},
  volume  = {35},
  url     = {https://ieeexplore.ieee.org/document/8239924/},
  year    = {2018}
}

@inproceedings{Chen2015,
  abstract  = {Continuous Delivery (CD) has emerged as an auspicious software development discipline, with the promise of providing organizations the capability to release valuable software continuously to customers. Our organization has been implementing CD for the last two years. Thus far, we have moved 22 software applications to CD. I observed that CD has created a new context for architecting these applications. In this paper, I will try to characterize such a context of CD, explain why we need to architect for CD, describe the implications of architecting for CD, and discuss the challenges this new context creates. This information can provide insights to other practitioners for architecting their software applications, and provide researchers with input for developing their research agendas to further study this increasingly important topic.},
  author    = {Lianping Chen},
  doi       = {10.1109/WICSA.2015.23},
  isbn      = {9781479919222},
  journal   = {Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015},
  keywords  = {DevOps,architecturally significant requirements,continuous delivery,continuous deployment,continuous software engineering,non-functional requirements,quality attributes,software architecture},
  month     = {7},
  pages     = {131-134},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  title     = {Towards Architecting for Continuous Delivery},
  year      = {2015}
}

@article{Chen2015b,
  abstract  = {Continuous delivery (CD) has emerged as an auspicious alternative to traditional release engineering, promising to provide the capability to release valuable software continuously to customers. Paddy Power has been implementing CD for the past two years. This article explains why Paddy Power decided to adopt CD, describes the resulting CD capability, and reports the huge benefits and challenges involved. These experiences can provide fellow practitioners with insights for their adoption of CD, and the identified challenges can provide researchers valuable input for developing their research agendas.},
  author    = {Lianping Chen},
  doi       = {10.1109/MS.2015.27},
  issn      = {07407459},
  issue     = {2},
  journal   = {IEEE Software},
  keywords  = {DevOps,continuous delivery,continuous software engineering,release engineering,software deployment,software engineering},
  month     = {3},
  pages     = {50-54},
  publisher = {IEEE Computer Society},
  title     = {Continuous delivery: Huge benefits, but challenges too},
  volume    = {32},
  year      = {2015}
}

@misc{Nicola2017,
  doi       = {10.48550/ARXIV.1606.04036},
  url       = {https://arxiv.org/abs/1606.04036},
  author    = {Dragoni, Nicola and Giallorenzo, Saverio and Lafuente, Alberto Lluch and Mazzara, Manuel and Montesi, Fabrizio and Mustafin, Ruslan and Safina, Larisa},
  keywords  = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title     = {Microservices: yesterday, today, and tomorrow},
  publisher = {arXiv},
  year      = {2016},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@book{KubernetesBook,
  title     = {Kubernetes Up and Running: Dive into the Future of Infrastructure},
  author    = {Brendan Burns, Joe Beda, Kelsey Hightower & Lachlan Evenson},
  publisher = {Oreilly},
  isbn      = {9781098121976; 109812197X; 9781098110208; 109811020X},
  year      = {2022},
  edition   = {3},
  url       = {libgen.li/file.php?md5=fe9871c72028e7e036795bffaf909b34}
}

@misc{davidbritch,
  title   = {Containerized microservices - xamarin},
  url     = {https://docs.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/containerized-microservices#:~:text=with%20client%20apps.-,Containerization,to%20a%20host%20operating%20system.},
  journal = {Xamarin | Microsoft Docs},
  author  = {Davidbritch}
}
@misc{kubernetes2021What,
  title   = {What is kubernetes?},
  url     = {https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/},
  journal = {Kubernetes},
  year    = {2021},
  month   = {Jul}
}  
@misc{gomod,
  title   = {The go blog on go modules},
  url     = {https://go.dev/blog/using-go-modules},
  journal = {Go},
  year    = {2021},
  month   = {Jul}
}
@misc{requirementPython,
  title   = {How to install python packages with PIP and requirements.txt},
  url     = {https://note.nkmk.me/en/python-pip-install-requirements/},
  journal = {How to install Python packages with pip and requirements.txt}
}
@misc{rubySpec,
  title   = {Ruby/Spec: The ruby spec suite AKA ruby/spec},
  url     = {https://github.com/ruby/spec},
  journal = {GitHub},
  author  = {Software, Open Source}
}
@misc{GitOps,
  title     = {Gitops},
  url       = {https://www.gitops.tech/},
  journal   = {GitOps},
  publisher = {Wavework},
  author    = {Flaurian Beetz and Anja Kammer and Simon Harrer}
}  